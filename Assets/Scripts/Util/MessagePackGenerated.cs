// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;
    using UnityEngine;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(6)
            {
                { typeof(Vector3[]), 0 },
                { typeof(global::EsperFightersCup.Net.BuffGenerateArguments), 1 },
                { typeof(global::EsperFightersCup.Net.GameParticlePlayArguments), 2 },
                { typeof(global::EsperFightersCup.Net.GameParticlePlayAttachedArguments), 3 },
                { typeof(global::EsperFightersCup.Net.GameSoundPlayArguments), 4 },
                { typeof(global::EsperFightersCup.Net.GameUIPlayArguments), 5 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<Vector3>();
                case 1: return new MessagePack.Formatters.EsperFightersCup.Net.BuffGenerateArgumentsFormatter();
                case 2: return new MessagePack.Formatters.EsperFightersCup.Net.GameParticlePlayArgumentsFormatter();
                case 3: return new MessagePack.Formatters.EsperFightersCup.Net.GameParticlePlayAttachedArgumentsFormatter();
                case 4: return new MessagePack.Formatters.EsperFightersCup.Net.GameSoundPlayArgumentsFormatter();
                case 5: return new MessagePack.Formatters.EsperFightersCup.Net.GameUIPlayArgumentsFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.EsperFightersCup.Net
{
    using System;
    using System.Buffers;
    using MessagePack;
    using UnityEngine;

    public sealed class BuffGenerateArgumentsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EsperFightersCup.Net.BuffGenerateArguments>
    {

        public void Serialize(ref MessagePackWriter writer, global::EsperFightersCup.Net.BuffGenerateArguments value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.Type);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BuffId, options);
            writer.Write(value.Duration);
            formatterResolver.GetFormatterWithVerify<float[]>().Serialize(ref writer, value.ValueFloat, options);
            formatterResolver.GetFormatterWithVerify<Vector3[]>().Serialize(ref writer, value.ValueVector3, options);
            writer.Write(value.AllowDuplicates);
            writer.Write(value.Damage);
            writer.Write(value.IsOnlyOnce);
        }

        public global::EsperFightersCup.Net.BuffGenerateArguments Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(int);
            var __BuffId__ = default(string);
            var __Duration__ = default(float);
            var __ValueFloat__ = default(float[]);
            var __ValueVector3__ = default(Vector3[]);
            var __AllowDuplicates__ = default(bool);
            var __Damage__ = default(float);
            var __IsOnlyOnce__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = reader.ReadInt32();
                        break;
                    case 1:
                        __BuffId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Duration__ = reader.ReadSingle();
                        break;
                    case 3:
                        __ValueFloat__ = formatterResolver.GetFormatterWithVerify<float[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ValueVector3__ = formatterResolver.GetFormatterWithVerify<Vector3[]>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __AllowDuplicates__ = reader.ReadBoolean();
                        break;
                    case 6:
                        __Damage__ = reader.ReadSingle();
                        break;
                    case 7:
                        __IsOnlyOnce__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::EsperFightersCup.Net.BuffGenerateArguments(__Type__, __BuffId__, __Duration__, __ValueFloat__, __ValueVector3__, __AllowDuplicates__, __Damage__, __IsOnlyOnce__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameParticlePlayArgumentsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EsperFightersCup.Net.GameParticlePlayArguments>
    {

        public void Serialize(ref MessagePackWriter writer, global::EsperFightersCup.Net.GameParticlePlayArguments value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<Vector3>().Serialize(ref writer, value.Angle, options);
        }

        public global::EsperFightersCup.Net.GameParticlePlayArguments Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Position__ = default(Vector3);
            var __Angle__ = default(Vector3);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Position__ = formatterResolver.GetFormatterWithVerify<Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Angle__ = formatterResolver.GetFormatterWithVerify<Vector3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::EsperFightersCup.Net.GameParticlePlayArguments(__Name__, __Position__, __Angle__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameParticlePlayAttachedArgumentsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EsperFightersCup.Net.GameParticlePlayAttachedArguments>
    {

        public void Serialize(ref MessagePackWriter writer, global::EsperFightersCup.Net.GameParticlePlayAttachedArguments value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.AttachIndex);
        }

        public global::EsperFightersCup.Net.GameParticlePlayAttachedArguments Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __AttachIndex__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AttachIndex__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::EsperFightersCup.Net.GameParticlePlayAttachedArguments(__Name__, __AttachIndex__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameSoundPlayArgumentsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EsperFightersCup.Net.GameSoundPlayArguments>
    {

        public void Serialize(ref MessagePackWriter writer, global::EsperFightersCup.Net.GameSoundPlayArguments value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.InitParameter, options);
            writer.Write(value.ParameterValue);
        }

        public global::EsperFightersCup.Net.GameSoundPlayArguments Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Position__ = default(Vector3);
            var __InitParameter__ = default(string);
            var __ParameterValue__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Position__ = formatterResolver.GetFormatterWithVerify<Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __InitParameter__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ParameterValue__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::EsperFightersCup.Net.GameSoundPlayArguments(__Name__, __Position__, __InitParameter__, __ParameterValue__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameUIPlayArgumentsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EsperFightersCup.Net.GameUIPlayArguments>
    {

        public void Serialize(ref MessagePackWriter writer, global::EsperFightersCup.Net.GameUIPlayArguments value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<Vector2>().Serialize(ref writer, value.Position, options);
            writer.Write(value.RotationY);
            formatterResolver.GetFormatterWithVerify<Vector2>().Serialize(ref writer, value.Scale, options);
            writer.Write(value.Duration);
            writer.Write(value.AuthorViewID);
        }

        public global::EsperFightersCup.Net.GameUIPlayArguments Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Position__ = default(Vector2);
            var __RotationY__ = default(float);
            var __Scale__ = default(Vector2);
            var __Duration__ = default(float);
            var __AuthorViewID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Position__ = formatterResolver.GetFormatterWithVerify<Vector2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __RotationY__ = reader.ReadSingle();
                        break;
                    case 3:
                        __Scale__ = formatterResolver.GetFormatterWithVerify<Vector2>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Duration__ = reader.ReadSingle();
                        break;
                    case 5:
                        __AuthorViewID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::EsperFightersCup.Net.GameUIPlayArguments(__Name__, __Position__, __RotationY__, __Scale__, __Duration__, __AuthorViewID__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

